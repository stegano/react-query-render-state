import*as r from"@tanstack/react-query";import*as e from"react";import*as t from"react-render-state";var a={d:(r,e)=>{for(var t in e)a.o(e,t)&&!a.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},o:(r,e)=>Object.prototype.hasOwnProperty.call(r,e)};const u=(s={useInfiniteQuery:()=>r.useInfiniteQuery,useQuery:()=>r.useQuery},n={},a.d(n,s),n);var s,n;const o=(r=>{var e={};return a.d(e,r),e})({useEffect:()=>e.useEffect}),c=(r=>{var e={};return a.d(e,r),e})({IRenderState:()=>t.IRenderState,useRenderState:()=>t.useRenderState}),i=r=>{const[e,,,,,,,,t]=(0,c.useRenderState)();return(0,o.useEffect)((()=>{switch(r.status){case"pending":t((r=>({previousData:r.currentData,previousError:r.currentError,currentData:void 0,currentError:void 0,status:c.IRenderState.Status.Loading})));break;case"success":t((e=>({previousData:e.currentData,previousError:e.currentError,currentData:r.data,currentError:void 0,status:c.IRenderState.Status.Success})));break;case"error":t((e=>({previousData:e.currentData,previousError:e.currentError,currentData:void 0,currentError:r.error,status:c.IRenderState.Status.Error})))}}),[t,r.data,r.error,r.status]),{render:e,...r}},d=(...r)=>{const e=(0,u.useQuery)(...r);return i(e)},p=(...r)=>{const e=(0,u.useInfiniteQuery)(...r);return i(e)};export{i as useConvertQueryRenderStateResult,p as useInfiniteQueryRenderState,d as useQueryRenderState};