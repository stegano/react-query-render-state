import*as r from"@tanstack/react-query";import*as e from"react";import*as t from"react-render-state";var a={d:(r,e)=>{for(var t in e)a.o(e,t)&&!a.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},o:(r,e)=>Object.prototype.hasOwnProperty.call(r,e)};const u=(n={useInfiniteQuery:()=>r.useInfiniteQuery,useQuery:()=>r.useQuery},s={},a.d(s,n),s);var n,s;const o=(r=>{var e={};return a.d(e,r),e})({useEffect:()=>e.useEffect}),c=(r=>{var e={};return a.d(e,r),e})({IRenderState:()=>t.IRenderState,useRenderState:()=>t.useRenderState}),i=r=>{const[e,,,,,,,,t]=(0,c.useRenderState)();return(0,o.useEffect)((()=>{const{isFetching:e,isRefetching:a,isSuccess:u,isError:n}=r;e||a?t((r=>({previousData:r.currentData,previousError:r.currentError,currentData:void 0,currentError:void 0,status:c.IRenderState.Status.Loading}))):u?t((e=>({previousData:e.currentData,previousError:e.currentError,currentData:r.data,currentError:void 0,status:c.IRenderState.Status.Success}))):n&&t((e=>({previousData:e.currentData,previousError:e.currentError,currentData:void 0,currentError:r.error??void 0,status:c.IRenderState.Status.Error})))}),[t,r]),{render:e,...r}},d=(...r)=>{const e=(0,u.useQuery)(...r);return i(e)},v=(...r)=>{const e=(0,u.useInfiniteQuery)(...r);return i(e)};export{i as useConvertQueryRenderStateResult,v as useInfiniteQueryRenderState,d as useQueryRenderState};